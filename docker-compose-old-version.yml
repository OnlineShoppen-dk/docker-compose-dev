version: "3"

services:    
    main-service:
        build:
            context: ./main-service/main-service/
            dockerfile: Dockerfile
        image: main-service
        container_name: main-service-container
        environment:
            # JWT
            ISSUER: "OnlineShoppen.dk"
            AUDIENCE: "OnlineShoppen.dk"
            KEY: "SZBNheG6DYChL2oyIo6Q3dAiK4sREZGPX6orWfH2Mk="
            # MySQL
            CONNECTION_STRING: "server=192.168.65.254;user=user;password=userpass;database=mainservicedb"
            # RabbitMQ
            RABBITMQ_HOST: "rabbitqueue"
            RABBITMQ_USER: "user"
            RABBITMQ_PASS: "userpass"
            # RabbitMQ Queues
            RABBITMQ_PRODUCT_SYNC_QUEUE: "productAddQueue"
            RABBITMQ_PRODUCT_ADD_QUEUE: "productAddQueue"
            RABBITMQ_PRODUCT_UPDATE_QUEUE: "productUpdateQueue"
            RABBITMQ_PRODUCT_DELETE_QUEUE: "productDeleteQueue"
            # Azurite
            AZURITE_CONNECTION_STRING: "UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://host.docker.internal"
            AZURITE_CONTAINER: "mainservicecontainer"
        ports:
            - "8081:8080"
        depends_on:
            main-service-db:
                condition: service_healthy
    
    catalog-service:
        build:
            context: ./catalog-service-v2/catalog-service-v2/
            dockerfile: Dockerfile
        ports:
            - "8080:8080" # Maps port 80 in the container to port 8080 on the host
        environment:
            ELASTICSEARCH_USERNAME: "elastic"
            ELASTICSEARCH_PASSWORD: "changeme"
        depends_on:
            - elasticsearch # Ensures it starts after Elasticsearch is available
        restart: unless-stopped
        networks:
            - elastic

    dummy-index-service:
        build:
            context: ./dummy-index/indexer-v0/
            dockerfile: Dockerfile
        ports:
            - "8082:8080" # Maps port 80 in the container to port 8080 on the host
        environment:
            ELASTICSEARCH_USERNAME: "elastic"
            ELASTICSEARCH_PASSWORD: "changeme"
            RABBITMQ_HOST: "rabbitqueue"
            RABBITMQ_USER: "user"
            RABBITMQ_PASS: "userpass"
        depends_on:
            - elasticsearch # Ensures it starts after Elasticsearch is available
        restart: unless-stopped
        networks:
            - elastic

    # SERVICES
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
        container_name: elasticsearch
        environment:
          - discovery.type=single-node
        ports:
          - "9200:9200"
          - "9300:9300"
        networks:
            - elastic

    kibana:
        image: docker.elastic.co/kibana/kibana:7.10.1
        container_name: kibana
        ports:
          - "5601:5601"
        environment:
          - ELASTICSEARCH_URL=http://elasticsearch:9200

    azurite:
        image: mcr.microsoft.com/azure-storage/azurite
        container_name: azurite
        ports:
            - "10000:10000"
            - "10001:10001"
            - "10002:10002"
        command: "azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0"
        volumes:
            - ./azurite-data:/data
     
    main-service-db:
        image: mysql:8.0.29
        container_name: main-service-db
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: mainpass
            MYSQL_DATABASE: mainservicedb
            MYSQL_USER: user
            MYSQL_PASSWORD: userpass
        ports:
            - "3306:3306"
        volumes:
            - ./mysql:/var/lib/mysql
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
            interval: 20s
            timeout: 10s
            retries: 5

    rabbitqueue:
        image: rabbitmq:3.13-management
        container_name: rabbitqueue
        command: rabbitmq-server
        ports:
            - "5672:5672"
            - "15672:15672"
        environment:
            RABBITMQ_DEFAULT_USER: user
            RABBITMQ_DEFAULT_PASS: userpass
        healthcheck:
            test: rabbitmq-diagnostics check_port_connectivity
            interval: 20s
            timeout: 10s
            retries: 5

networks:
    elastic:

    # front-end repository
    # frontend:
    #     build: ./onlineshoppen-frontend
    #     container_name: frontend
    #     restart: always
    #     stdin_open: true
    #     environment:
    #         - WDS_SOCKET_HOST=127.0.0.1
    #         - CHOKIDAR_USEPOLLING=true
    #         - WATCHPACK_POLLING=true
    #     ports:
    #         - 3000:8000
    #     volumes:
    #         - ./onlineshoppen-frontend/src:/app/src
    #         - /app/node_modules

    # email-service repository
    # email-service:
    #     build: ./email-service/EmailService
    #     container_name: email-service
    #     depends_on:
    #         rabbitqueue:
    #             condition: service_healthy
    #             restart: true

    # auth-service repository
    # auth:
    #     build:
    #         context: ./auth-service
    #         dockerfile: Dockerfile
    #     container_name: auth-service
    #     restart: always
    #     ports:
    #         - 8080
    #     environment:
    #         DATABASE_URL: mysql://user:test12@db:3306/prismadb
    #         AMQP_URL: amqp://user:userpass@rabbitqueue:5672/
    #     depends_on:
    #         - db
    #         - rabbitqueue
    #     volumes:
    #         - ./auth-service/src:/app/auth
    #         - /app/node_modules

    # nginx:
    #     image: nginx:latest
    #     container_name: nginx
    #     volumes:
    #         - ./auth-service/conf:/etc/nginx/conf.d
    #     depends_on:
    #         - auth
    #     ports:
    #         - 80:80

    # db:
    #     image: mysql:latest
    #     container_name: auth-service-db
    #     restart: always
    #     environment:
    #         MYSQL_ROOT_PASSWORD: test12
    #         MYSQL_DATABASE: prismadb
    #         MYSQL_USER: user
    #         MYSQL_PASSWORD: test12
    #     ports:
    #         - 3307:3306
    #     volumes:
    #         - ./auth-service/mysql:/var/lib/mysql

    # auth-service repository
    # auth:
    #     build:
    #         context: ./auth-service
    #         dockerfile: Dockerfile
    #     container_name: auth-service
    #     restart: always
    #     ports:
    #         - 8080
    #     environment:
    #         DATABASE_URL: mysql://user:test12@db:3306/prismadb
    #         AMQP_URL: amqp://user:userpass@rabbitqueue:5672/
    #     depends_on:
    #         - db
    #         - rabbitqueue
    #     volumes:
    #         - ./auth-service/src:/app/auth
    #         - /app/node_modules

    # nginx:
    #     image: nginx:latest
    #     container_name: nginx
    #     volumes:
    #         - ./auth-service/conf:/etc/nginx/conf.d
    #     depends_on:
    #         - auth
    #     ports:
    #         - 80:80


    # old catalog-service-elasticsearch
    # setup:
    #     profiles:
    #         - setup
    #     build:
    #         context: setup/
    #         args:
    #             ELASTIC_VERSION: ${ELASTIC_VERSION}
    #     init: true
    #     volumes:
    #         - ./catalog-service/setup/entrypoint.sh:/entrypoint.sh:ro,Z
    #         - ./catalog-service/setup/lib.sh:/lib.sh:ro,Z
    #         - ./catalog-service/setup/roles:/roles:ro,Z
    #     environment:
    #         ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
    #         LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    #         KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    #         METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
    #         FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
    #         HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
    #         MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
    #         BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    #     depends_on:
    #         - elasticsearch

    # catalogservice:
    #     build:
    #         context: ./catalog-service/catalog-service/
    #         dockerfile: Dockerfile
    #     ports:
    #         - "8080:80" # Maps port 80 in the container to port 8080 on the host
    #     depends_on:
    #         - elasticsearch # Ensures it starts after Elasticsearch is available
    #     restart: unless-stopped
    #     environment:
    #         - ELASTICSEARCH_URL=http://elasticsearch1:9200 # Example environment variable
    # catalog-service repository
    # catalogservice:
    #     build:
    #         context: ./catalog-service/catalog-service/
    #         dockerfile: Dockerfile
    #     ports:
    #         - "8080:80" # Maps port 80 in the container to port 8080 on the host
    #     depends_on:
    #         - elasticsearch # Ensures it starts after Elasticsearch is available
    #     restart: unless-stopped
    #     environment:
    #         - ELASTICSEARCH_URL=http://elasticsearch1:9200 # Example environment variable
    # elasticsearch1:
    #     build:
    #         context: ./catalog-service/elasticsearch/
    #         args:
    #             ELASTIC_VERSION: ${ELASTIC_VERSION}
    #     volumes:
    #         - ./catalog-service/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
    #         - elasticsearch1:/usr/share/elasticsearch/data:Z
    #     ports:
    #         - "9200:9200"
    #         - "9300:9300"
    #     environment:
    #         - node.name=elasticsearch1
    #         - cluster.initial_master_nodes=elasticsearch1,elasticsearch2,elasticsearch3
    #         - discovery.seed_hosts=elasticsearch2,elasticsearch3
    #         - cluster.name=docker-cluster
    #         - ES_JAVA_OPTS=-Xms512m -Xmx512m
    #         - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-}
    #     restart: unless-stopped
    # elasticsearch2:
    #     build:
    #         context: ./catalog-service/elasticsearch/
    #         args:
    #             ELASTIC_VERSION: ${ELASTIC_VERSION}
    #     volumes:
    #         - ./catalog-service/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
    #         - elasticsearch2:/usr/share/elasticsearch/data:Z
    #     ports:
    #         - "9201:9200"
    #         - "9301:9300"
    #     environment:
    #         - node.name=elasticsearch2
    #         - cluster.initial_master_nodes=elasticsearch1,elasticsearch2,elasticsearch3
    #         - discovery.seed_hosts=elasticsearch1,elasticsearch3
    #         - cluster.name=docker-cluster
    #         - ES_JAVA_OPTS=-Xms512m -Xmx512m
    #         - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-}
    #     restart: unless-stopped
    # elasticsearch3:
    #     build:
    #         context: ./catalog-service/elasticsearch/
    #         args:
    #             ELASTIC_VERSION: ${ELASTIC_VERSION}
    #     volumes:
    #         - ./catalog-service/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
    #         - elasticsearch3:/usr/share/elasticsearch/data:Z
    #     ports:
    #         - "9202:9200"
    #         - "9302:9300"
    #     environment:
    #         - node.name=elasticsearch3
    #         - cluster.initial_master_nodes=elasticsearch1,elasticsearch2,elasticsearch3
    #         - discovery.seed_hosts=elasticsearch1,elasticsearch2
    #         - cluster.name=docker-cluster
    #         - ES_JAVA_OPTS=-Xms512m -Xmx512m
    #         - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-}
    #     restart: unless-stopped
    # logstash:
    #     build:
    #         context: ./catalog-service/logstash/
    #         args:
    #             ELASTIC_VERSION: ${ELASTIC_VERSION}
    #     volumes:
    #         - ./catalog-service/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
    #         - ./catalog-service/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    #     ports:
    #         - 5044:5044
    #         - 50000:50000/tcp
    #         - 50000:50000/udp
    #         - 9600:9600
    #     environment:
    #         LS_JAVA_OPTS: -Xms256m -Xmx256m
    #         LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    #     depends_on:
    #         - elasticsearch1
    #     restart: unless-stopped
    # kibana:
    #     build:
    #         context: ./catalog-service/kibana/
    #         args:
    #             ELASTIC_VERSION: ${ELASTIC_VERSION}
    #     volumes:
    #         - ./catalog-service/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    #     ports:
    #         - 5601:5601
    #     environment:
    #         KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    #     depends_on:
    #         - elasticsearch1
    #     restart: unless-stopped

# volumes:
#     elasticsearch1:
#     elasticsearch2:
#     elasticsearch3:

